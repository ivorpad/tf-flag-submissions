import * as Typegen from 'nexus-plugin-prisma/typegen'
import * as Prisma from '../../.prisma/client';

// Pagination type
type Pagination = {
  first?: boolean
  last?: boolean
  before?: boolean
  after?: boolean
}

// Prisma custom scalar names
type CustomScalars = 'DateTime'

// Prisma model type definitions
interface PrismaModels {
  Author: Prisma.Author
  Item: Prisma.Item
  Reason: Prisma.Reason
  Reviewer: Prisma.Reviewer
}

// Prisma input types metadata
interface NexusPrismaInputs {
  Query: {
    authors: {
      filtering: 'username' | 'Item' | 'Reason' | 'AND' | 'OR' | 'NOT'
      ordering: 'username'
    }
    items: {
      filtering: 'authorUsername' | 'createdAt' | 'id' | 'itemName' | 'submittedAt' | 'updatedAt' | 'AND' | 'OR' | 'NOT' | 'Author'
      ordering: 'authorUsername' | 'createdAt' | 'id' | 'itemName' | 'submittedAt' | 'updatedAt'
    }
    reasons: {
      filtering: 'authorId' | 'createdAt' | 'id' | 'reason' | 'resolved' | 'reviewerId' | 'updatedAt' | 'AND' | 'OR' | 'NOT' | 'Author' | 'Reviewer'
      ordering: 'authorId' | 'createdAt' | 'id' | 'reason' | 'resolved' | 'reviewerId' | 'updatedAt'
    }
    reviewers: {
      filtering: 'username' | 'Reason' | 'AND' | 'OR' | 'NOT'
      ordering: 'username'
    }
  },
  Author: {
    Item: {
      filtering: 'authorUsername' | 'createdAt' | 'id' | 'itemName' | 'submittedAt' | 'updatedAt' | 'AND' | 'OR' | 'NOT' | 'Author'
      ordering: 'authorUsername' | 'createdAt' | 'id' | 'itemName' | 'submittedAt' | 'updatedAt'
    }
    Reason: {
      filtering: 'authorId' | 'createdAt' | 'id' | 'reason' | 'resolved' | 'reviewerId' | 'updatedAt' | 'AND' | 'OR' | 'NOT' | 'Author' | 'Reviewer'
      ordering: 'authorId' | 'createdAt' | 'id' | 'reason' | 'resolved' | 'reviewerId' | 'updatedAt'
    }
  }
  Item: {

  }
  Reason: {

  }
  Reviewer: {
    Reason: {
      filtering: 'authorId' | 'createdAt' | 'id' | 'reason' | 'resolved' | 'reviewerId' | 'updatedAt' | 'AND' | 'OR' | 'NOT' | 'Author' | 'Reviewer'
      ordering: 'authorId' | 'createdAt' | 'id' | 'reason' | 'resolved' | 'reviewerId' | 'updatedAt'
    }
  }
}

// Prisma output types metadata
interface NexusPrismaOutputs {
  Query: {
    author: 'Author'
    authors: 'Author'
    item: 'Item'
    items: 'Item'
    reason: 'Reason'
    reasons: 'Reason'
    reviewer: 'Reviewer'
    reviewers: 'Reviewer'
  },
  Mutation: {
    createOneAuthor: 'Author'
    updateOneAuthor: 'Author'
    updateManyAuthor: 'BatchPayload'
    deleteOneAuthor: 'Author'
    deleteManyAuthor: 'BatchPayload'
    upsertOneAuthor: 'Author'
    createOneItem: 'Item'
    updateOneItem: 'Item'
    updateManyItem: 'BatchPayload'
    deleteOneItem: 'Item'
    deleteManyItem: 'BatchPayload'
    upsertOneItem: 'Item'
    createOneReason: 'Reason'
    updateOneReason: 'Reason'
    updateManyReason: 'BatchPayload'
    deleteOneReason: 'Reason'
    deleteManyReason: 'BatchPayload'
    upsertOneReason: 'Reason'
    createOneReviewer: 'Reviewer'
    updateOneReviewer: 'Reviewer'
    updateManyReviewer: 'BatchPayload'
    deleteOneReviewer: 'Reviewer'
    deleteManyReviewer: 'BatchPayload'
    upsertOneReviewer: 'Reviewer'
  },
  Author: {
    username: 'String'
    Item: 'Item'
    Reason: 'Reason'
  }
  Item: {
    authorUsername: 'String'
    createdAt: 'DateTime'
    id: 'Int'
    itemName: 'String'
    submittedAt: 'DateTime'
    updatedAt: 'DateTime'
    Author: 'Author'
  }
  Reason: {
    authorId: 'String'
    createdAt: 'DateTime'
    id: 'Int'
    reason: 'String'
    resolved: 'Boolean'
    reviewerId: 'String'
    updatedAt: 'DateTime'
    Author: 'Author'
    Reviewer: 'Reviewer'
  }
  Reviewer: {
    username: 'String'
    Reason: 'Reason'
  }
}

// Helper to gather all methods relative to a model
interface NexusPrismaMethods {
  Author: Typegen.NexusPrismaFields<'Author'>
  Item: Typegen.NexusPrismaFields<'Item'>
  Reason: Typegen.NexusPrismaFields<'Reason'>
  Reviewer: Typegen.NexusPrismaFields<'Reviewer'>
  Query: Typegen.NexusPrismaFields<'Query'>
  Mutation: Typegen.NexusPrismaFields<'Mutation'>
}

interface NexusPrismaGenTypes {
  inputs: NexusPrismaInputs
  outputs: NexusPrismaOutputs
  methods: NexusPrismaMethods
  models: PrismaModels
  pagination: Pagination
  scalars: CustomScalars
}

declare global {
  interface NexusPrismaGen extends NexusPrismaGenTypes {}

  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = Typegen.GetNexusPrisma<TypeName, ModelOrCrud>;
}
  