### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Author {
  items: [Item!]
  reasons: [Reason!]
  username: String
}

input AuthorCreateOneWithoutReasonInput {
  connect: AuthorWhereUniqueInput
  create: AuthorCreateWithoutReasonInput
}

input AuthorCreateWithoutReasonInput {
  Item: ItemCreateManyWithoutAuthorInput
  username: String!
}

input AuthorWhereInput {
  AND: [AuthorWhereInput!]
  Item: ItemFilter
  NOT: [AuthorWhereInput!]
  OR: [AuthorWhereInput!]
  Reason: ReasonFilter
  username: StringFilter
}

input AuthorWhereUniqueInput {
  username: String
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Item {
  authorUsername: String
  id: Int
  itemName: String
}

input ItemCreateManyWithoutAuthorInput {
  connect: [ItemWhereUniqueInput!]
  create: [ItemCreateWithoutAuthorInput!]
}

input ItemCreateWithoutAuthorInput {
  createdAt: DateTime
  itemName: String!
  submittedAt: DateTime
  updatedAt: DateTime
}

input ItemFilter {
  every: ItemWhereInput
  none: ItemWhereInput
  some: ItemWhereInput
}

input ItemWhereInput {
  AND: [ItemWhereInput!]
  Author: AuthorWhereInput
  authorUsername: NullableStringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  itemName: StringFilter
  NOT: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  submittedAt: NullableDateTimeFilter
  updatedAt: DateTimeFilter
}

input ItemWhereUniqueInput {
  id: Int
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Mutation {
  createOneReason(data: ReasonCreateInput!): Reason!
}

input NullableDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Query {
  getItemCount: Int!
  reasons(after: ReasonWhereUniqueInput, before: ReasonWhereUniqueInput, first: Int, last: Int, where: ReasonWhereInput): [Reason!]!
}

type Reason {
  authorId: String
  id: Int
  reason: String
  resolved: Boolean
  reviewerId: String
}

input ReasonCreateInput {
  Author: AuthorCreateOneWithoutReasonInput!
  createdAt: DateTime
  reason: String!
  resolved: Boolean
  Reviewer: ReviewerCreateOneWithoutReasonInput!
  updatedAt: DateTime
}

input ReasonFilter {
  every: ReasonWhereInput
  none: ReasonWhereInput
  some: ReasonWhereInput
}

input ReasonWhereInput {
  AND: [ReasonWhereInput!]
  Author: AuthorWhereInput
  authorId: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [ReasonWhereInput!]
  OR: [ReasonWhereInput!]
  reason: StringFilter
  resolved: BooleanFilter
  Reviewer: ReviewerWhereInput
  reviewerId: StringFilter
  updatedAt: DateTimeFilter
}

input ReasonWhereUniqueInput {
  id: Int
}

type Reviewer {
  reasons: [Reason!]
  username: String
}

input ReviewerCreateOneWithoutReasonInput {
  connect: ReviewerWhereUniqueInput
  create: ReviewerCreateWithoutReasonInput
}

input ReviewerCreateWithoutReasonInput {
  username: String!
}

input ReviewerWhereInput {
  AND: [ReviewerWhereInput!]
  NOT: [ReviewerWhereInput!]
  OR: [ReviewerWhereInput!]
  Reason: ReasonFilter
  username: StringFilter
}

input ReviewerWhereUniqueInput {
  username: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}
